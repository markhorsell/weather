[{"/home/mark/Documents/projects/weather/weather-frontend/src/Weather.tsx":"1","/home/mark/Documents/projects/weather/weather-frontend/src/App.tsx":"2","/home/mark/Documents/projects/weather/weather-frontend/src/reportWebVitals.ts":"3","/home/mark/Documents/projects/weather/weather-frontend/src/index.tsx":"4","/home/mark/Documents/projects/weather/weather-frontend/src/WeatherUseFetch.tsx":"5"},{"size":1471,"mtime":1609202972266,"results":"6","hashOfConfig":"7"},{"size":417,"mtime":1609416382447,"results":"8","hashOfConfig":"7"},{"size":425,"mtime":1607947708939,"results":"9","hashOfConfig":"7"},{"size":502,"mtime":1607956788784,"results":"10","hashOfConfig":"7"},{"size":917,"mtime":1609416809534,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"1284ned",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/home/mark/Documents/projects/weather/weather-frontend/src/Weather.tsx",["24"],"import { QueryClient, QueryClientProvider, useQuery } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\n\nconst queryClient = new QueryClient();\n\nexport default function Weather() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Example />\n    </QueryClientProvider>\n  );\n}\n\nfunction Example(): any {\n  //code is for azure id - IS NOT the weather data secret key\n\nconst fetchString=`https://markweather.azurewebsites.net/api/HttpTrigger2?code=bEePfjWLznUduliGYYUHeDGbzXLtSyCbPjgVyIe/Zh0iTlITyjywJA==`;\n//const fetchString=`http://localhost:7071/api/HttpTrigger2`;\n\n  const { isLoading, error, data } = useQuery(\"weatherData\", () =>\n    fetch(\n      fetchString\n    ).then((res) => \n  \n      res.json()\n    )\n    \n      \n  );\n  //https://markweather.azurewebsites.net/api/HttpTrigger2?code=bEePfjWLznUduliGYYUHeDGbzXLtSyCbPjgVyIe/Zh0iTlITyjywJA==\n\n  if (isLoading) return \"Loading...\";\n\n  if (error) {\n    const e: any = error;\n    return \"An error has occurred x: \" + e.message;\n  }\n  if (data) {\n    console.log(data);\n  }\n\n  return (\n    <div style={{ padding: \"0px\", border: \"1px solid grey\" }}>\n \n    <div>\n    {data.list.map((dp:any) =>{\n      return <div>\n        {dp.dt_txt}{\" \"}\n        {dp.weather[0].main}\n        {dp.weather[0].icon}\n        <img src={`http://openweathermap.org/img/w/${dp.weather[0].icon}.png`}/>\n        </div>\n    })}\n    </div>\n  \n\n      <ReactQueryDevtools initialIsOpen />\n    </div>\n  );\n}\n","/home/mark/Documents/projects/weather/weather-frontend/src/App.tsx",[],"/home/mark/Documents/projects/weather/weather-frontend/src/reportWebVitals.ts",[],"/home/mark/Documents/projects/weather/weather-frontend/src/index.tsx",[],"/home/mark/Documents/projects/weather/weather-frontend/src/WeatherUseFetch.tsx",["25"],"\n\n\nimport { useEffect } from 'react';\nimport useFetch from 'use-http'\n\nconst fetchString=`https://markweather.azurewebsites.net/api/HttpTrigger2?code=bEePfjWLznUduliGYYUHeDGbzXLtSyCbPjgVyIe/Zh0iTlITyjywJA==`;\n\n\nexport default function WeatherUseFetch() {\n  const options = {} // these options accept all native `fetch` options\n  // the last argument below [] means it will fire onMount (GET by default)\n  const { loading, error, data = [] } = useFetch(fetchString, options, [])\n\n  //console.log(data)\n  useEffect(()=>{\n    console.log(data)\n  },[data])\n  return (\n    <>\n      {error && 'Error!'}\n      {loading && 'Loading...'}\n      {data && data.list && data.list.map((dp:any) =>{\n      return <div key={dp.dt}>\n        {dp.dt_txt}{\" \"}\n        {dp.weather[0].main}\n        {dp.weather[0].icon}\n        <img src={`http://openweathermap.org/img/w/${dp.weather[0].icon}.png`}/>\n        </div>\n    })}\n    </>\n  )\n}\n ",{"ruleId":"26","severity":1,"message":"27","line":51,"column":9,"nodeType":"28","endLine":51,"endColumn":81},{"ruleId":"26","severity":1,"message":"27","line":28,"column":9,"nodeType":"28","endLine":28,"endColumn":81},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]