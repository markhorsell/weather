{"version":3,"sources":["components/WeatherPoint.tsx","WeatherUseFetch.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WeatherPoint","data","dp","dayjs","dt_txt","format","toString","src","weather","icon","dt","WeatherUseFetch","useFetch","loading","error","useState","days","setDays","useEffect","console","log","list","map","x","testDays","d","i","push","length","day","style","margin","display","width","border","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAEe,SAASA,EAAaC,GAAY,IACxCC,EAAKD,EAALC,GAGP,OACE,gCAEE,gCACCC,IAAMD,EAAGE,QAAQC,OAAO,QAAQC,WADjC,IAC8CH,IAAMD,EAAGE,QAAQC,OAAO,cAAcC,cAEpF,qBAAKC,IAAG,0CAAqCL,EAAGM,QAAQ,GAAGC,KAAnD,UACR,8BACCN,IAAMD,EAAGE,QAAQC,OAAO,SAASC,eAP1BJ,EAAGQ,ICAF,SAASC,IACtB,IADwC,EAGFC,YALvB,uHAGC,GAEqD,IAA7DC,EAHgC,EAGhCA,QAASC,EAHuB,EAGvBA,MAHuB,IAGhBb,YAHgB,MAGT,GAHS,IAIhBc,mBAAc,IAJE,mBAIjCC,EAJiC,KAI3BC,EAJ2B,KAuCxC,OAhCAC,qBAAU,WAER,GADAC,QAAQC,IAAInB,GACRA,EAAKoB,KAAM,CACbJ,EACEhB,EAAKoB,KAAKC,KAAI,SAACC,GAIb,OAAOA,MAIX,IAAIC,EAAgB,CAAC,IACPvB,EAAKoB,KAAK,GAAGjB,OAC3BH,EAAKoB,KAAKC,KAAI,SAACG,EAAQC,GAGjBA,EAAI,GACJvB,IAAMsB,EAAErB,QAAQC,OAAO,cAAcC,YACnCH,IAAMF,EAAKoB,KAAKK,EAAI,GAAGtB,QACpBC,OAAO,cACPC,YAELkB,EAASG,KAAK,IAEhBH,EAASA,EAASI,OAAS,GAAGD,KAAKF,MAGvCN,QAAQC,IAAII,GACZP,EAAQO,MAET,CAACvB,IAEF,gCACGa,GAAS,SACTD,GAAW,aACXG,GACCA,EAAKM,KAAI,SAACO,GACR,OACE,8BACGA,EAAIP,KAAI,SAACpB,GACR,OAAO,qBAAK4B,MAAO,CAACC,OAAO,OAASC,QAAQ,eAAgBC,MAAM,QAASC,OAAO,kBAA3E,SACL,cAAClC,EAAD,CAA0BE,GAAIA,GAAXA,EAAGQ,iBCnCzByB,MAbf,WACE,OACE,iDAIE,cAACxB,EAAD,QCASyB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b3bd912d.chunk.js","sourcesContent":["\nimport dayjs from 'dayjs'\nexport default function WeatherPoint(data: any) {\n  const {dp} =data;\n\n\n  return (\n    <div key={dp.dt}>\n      {/*dp.dt_txt} {dp.weather[0].main*/}\n      <div>\n      {dayjs(dp.dt_txt).format('dddd').toString()} {dayjs(dp.dt_txt).format('DD/MM/YYYY').toString()}\n      </div>\n      <img src={`http://openweathermap.org/img/w/${dp.weather[0].icon}.png`} />\n      <div>\n      {dayjs(dp.dt_txt).format('HH mm').toString()}\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport useFetch from \"use-http\";\nimport WeatherPoint from \"./components/WeatherPoint\";\nimport dayjs from \"dayjs\";\n\nconst fetchString = `https://markweather.azurewebsites.net/api/HttpTrigger2?code=bEePfjWLznUduliGYYUHeDGbzXLtSyCbPjgVyIe/Zh0iTlITyjywJA==`;\n\nexport default function WeatherUseFetch() {\n  const options = {}; // these options accept all native `fetch` options\n  // the last argument below [] means it will fire onMount (GET by default)\n  const { loading, error, data = [] } = useFetch(fetchString, options, []);\n  const [days, setDays] = useState<any>([]);\n\n  //console.log(data)\n  useEffect(() => {\n    console.log(data);\n    if (data.list) {\n      setDays(\n        data.list.map((x: any) => {\n          {\n            //  console.log(dayjs(x.dt_txt).format(\"DD/MM/YYYY\"));\n          }\n          return x;\n        })\n      );\n\n      let testDays: any = [[]];\n      const start = data.list[0].dt_txt;\n      data.list.map((d: any, i: number) => {\n        {\n          if (\n            i > 0 &&\n            dayjs(d.dt_txt).format(\"DD/MM/YYYY\").toString() !=\n              dayjs(data.list[i - 1].dt_txt)\n                .format(\"DD/MM/YYYY\")\n                .toString()\n          ) {\n            testDays.push([]);\n          }\n          testDays[testDays.length - 1].push(d);\n        }\n      });\n      console.log(testDays);\n      setDays(testDays);\n    }\n  }, [data]);\n  return (\n    <div>\n      {error && \"Error!\"}\n      {loading && \"Loading...\"}\n      {days &&\n        days.map((day: any) => {\n          return (\n            <div>\n              {day.map((dp: any) => {\n                return <div style={{margin:\"10px\" , display:\"inline-block\", width:\"100px\", border:\"1px solid grey\"}}>\n                  <WeatherPoint key={dp.dt} dp={dp} />\n                  </div>\n              })}\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n","import React from 'react';\n//import logo from './logo.svg';\n//import './App.css';\n//import Weather from './Weather';\nimport WeatherUseFetch from './WeatherUseFetch';\n//import Github from './Github';\n//import { ReactQueryDevtools } from \"react-query/devtools\";\n\nfunction App() {\n  return (\n    <div>\n    \n      {/*<Weather/>*/}\n      Cirencester xx\n      <WeatherUseFetch/>\n      {/*<Github/>*/}\n   \n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}